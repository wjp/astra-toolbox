package:
  name: libastra
  version: '2.1.3'

source:
  git_url: https://github.com/wjp/astra-toolbox.git
  git_tag: curvedconda

build:
  number: 0
  string: cuda_{{ cudatoolkit }}_{{ PKG_BUILDNUM }} # [win or linux]
  string: nocuda_{{ PKG_BUILDNUM }} # [osx]

requirements:
  build:
    - {{ compiler('c') }}    # [win or linux]
    - {{ compiler('cxx') }}  # [linux]
    - automake # [osx]
    - autoconf # [osx]
    - libtool # [osx]
    # libgcc-ng/libstdcxx-ng 9.3 introduce extra system requirements on glibc
    # For the older systems (debian8, debian9) we use g++ 5.4 and 7.3, resp.
    {% if linux and cxx_compiler_version in ['5.4', '7.3'] %}
    - libstdcxx-ng <9.3 # [linux]
    - libgcc-ng <9.3 # [linux]
    - libgomp <9.3 # [linux]
    {% endif %}
  host:
    {% if linux and cxx_compiler_version in ['5.4', '7.3'] %}
    - libstdcxx-ng <9.3 # [linux]
    - libgcc-ng <9.3 # [linux]
    - libgomp <9.3 # [linux]
    {% endif %}
    {% if cuda_dep_type == 'modular' %}
    - cuda-cudart {{ cudacudart_dep }} # [win or linux]
    - libcufft {{ libcufft_dep }} # [win or linux]
    {% else %}
    # We explicitly specify the cudatoolkit dependency string in
    # conda_build_config.yaml , forgoing pin_compatible.
    # This is because the cudatoolkit version numbering for 11.0/11.1/11.2 is
    # non-chronological on the nvidia conda channel.
    - cudatoolkit {{ cudatoolkit_dep }} # [win or linux]
    {% endif %}
  run:
    {% if cuda_dep_type == 'modular' %}
    - cuda-cudart {{ cudacudart_dep }} # [win or linux]
    - libcufft {{ libcufft_dep }} # [win or linux]
    {% else %}
    - cudatoolkit {{ cudatoolkit_dep }} # [win or linux]
    {% endif %}
  run_constrained:
    - pytorch-cuda {{ pytorchcuda_dep }} # [win or linux]
  {% if cuda_dep_type == 'modular' %}
    - cudatoolkit {{ cudatoolkit_dep }} # [win or linux]
  {% else %}
    - cuda-cudart {{ cudacudart_dep }} # [win or linux]
    - libcufft {{ libcufft_dep }} # [win or linux]
  {% endif %}

about:
  home: http://www.astra-toolbox.com
  license: GPLv3
  summary: 'The ASTRA Toolbox is a Python toolbox of high-performance GPU primitives for 2D and 3D tomography.'
